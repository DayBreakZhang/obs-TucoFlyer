// Scale down 4x, sample 16 pixels using 4 bilinear interpolations

uniform float4x4 ViewProj;
uniform texture2d image;
uniform float2 image_size;

sampler_state def_sampler {
    Filter   = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct VertInOut {
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VertInOut VSDefault(VertInOut vert_in)
{
    VertInOut vert_out;
    vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
    vert_out.uv  = vert_in.uv;
    return vert_out;
}

float4 PSDraw(VertInOut vert_in) : TARGET
{
    float s = 0.5 / image_size.x;
    float t = 0.5 / image_size.y;
    return (
        image.Sample(def_sampler, vert_in.uv + float2(s, 0.0)) +
        image.Sample(def_sampler, vert_in.uv + float2(-s, 0.0)) +
        image.Sample(def_sampler, vert_in.uv + float2(0.0, t)) +
        image.Sample(def_sampler, vert_in.uv + float2(0.0, -t))
    ) / 4.0;
}

technique Draw
{
    pass
    {
        vertex_shader = VSDefault(vert_in);
        pixel_shader  = PSDraw(vert_in);
    }
}
